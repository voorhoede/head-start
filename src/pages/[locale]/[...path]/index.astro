---
import { datocmsCollection, datocmsRequest } from '@lib/datocms';
import { getPageHref } from '@lib/routing/';
import {
  type PageRouteForPath,
  getPagePath,
  getPageSlugFromPath,
  getParentPages,
} from '@lib/routing/page';
import type { PageQuery, SiteLocale } from '@lib/datocms/types';
import type { PageUrl } from '@lib/seo';
import Layout from '@layouts/Default.astro';
import Blocks from '@blocks/Blocks.astro';
import type { AnyBlock } from '@blocks/Blocks';
import { formatBreadcrumb } from '@components/Breadcrumbs';
import PreviewModeSubscription from '@components/PreviewMode/PreviewModeSubscription.astro';
import query from './_index.query.graphql';

export async function getStaticPaths() {
  const pages = await datocmsCollection<PageRouteForPath>({
    collection: 'Pages',
    fragment: `
      _allSlugLocales { locale, value }
      parentPage {
        _allSlugLocales { locale, value }
        parentPage {
          _allSlugLocales { locale, value }
          parentPage {
            _allSlugLocales { locale, value }
            parentPage {
              _allSlugLocales { locale, value }
            }
          }
        }
      }
    `,
  });

  return pages.flatMap((page) => {
    const locales = page._allSlugLocales
      ?.map((slug) => slug.locale)
      .filter((locale) => !!locale);
    return locales?.map((locale) => {
      return { params: { locale, path: getPagePath({ page, locale }) } };
    });
  });
}

type Params = {
  locale: SiteLocale;
  path: string;
};

const { locale, path } = Astro.params as Params;
const variables = { locale, slug: getPageSlugFromPath(path) };
const { page } = await datocmsRequest<PageQuery>({ query, variables });

if (!page) {
  return Astro.rewrite(`/404/?locale=${locale}`);
}

const canonicalUrl = getPageHref({ locale, record: page });
if (Astro.url.pathname !== canonicalUrl) {
  return Astro.redirect(canonicalUrl);
}

const breadcrumbs = [...getParentPages(page), page].map((record) =>
  formatBreadcrumb({
    text: record.title,
    href: getPageHref({ locale, record }),
  })
);

const pageLocales = (page._allSlugLocales?.map(({ locale }) => locale) ??
  []) as SiteLocale[];
const pageUrls = pageLocales.map((locale) => ({
  locale,
  pathname: getPageHref({ locale, record: page }),
})) satisfies PageUrl[];
---

<Layout
  breadcrumbs={breadcrumbs}
  pageUrls={pageUrls}
  seoMetaTags={page._seoMetaTags}
>
  <PreviewModeSubscription query={query} variables={variables} />
  <h1>{page.title}</h1>
  <Blocks blocks={page.bodyBlocks as AnyBlock[]} />
</Layout>
