---
import { datocmsCollection, datocmsRequest } from '@lib/datocms';
import { getPageHref } from '@lib/routing/';
import {
  getPagePath,
  getPageSlugFromPath,
  getParentPages,
} from '@lib/routing/page';
import { 
  PageRoute as fragment, 
  type PageQuery, 
  type PageRouteFragment, 
  type SiteLocale 
} from '@lib/datocms/types';
import type { PageUrl } from '@lib/seo';
import Layout from '@layouts/Default.astro';
import Blocks from '@blocks/Blocks.astro';
import { formatBreadcrumb } from '@components/Breadcrumbs';
import PreviewModeSubscription from '@components/PreviewMode/PreviewModeSubscription.astro';
import query from './_index.query.graphql';

export async function getStaticPaths() {
  const pages = await datocmsCollection<PageRouteFragment>({
    collection: 'Pages',
    fragment,
  });
  return pages.flatMap((page) => {
    const locales = page._allSlugLocales
      ?.map((slug) => slug.locale)
      .filter((locale) => !!locale);
    return locales?.map((locale) => {
      return { params: { locale, path: getPagePath({ page, locale }) } };
    });
  });
}

type Params = {
  locale: SiteLocale;
  path: string;
};

const { locale, path } = Astro.params as Params;
const variables = { locale, slug: getPageSlugFromPath(path) };
const { page } = await datocmsRequest<PageQuery /*, typeof prerender */>({ query, variables });
const breadcrumbs = [...getParentPages(page), page].map((page) =>
  formatBreadcrumb({
    text: page.title,
    href: getPageHref({ locale, record: page }),
  })
);
const pageUrls = (page._allSlugLocales || []).map(({ locale }) => ({
  locale: locale as SiteLocale,
  pathname: getPageHref({ locale: locale as SiteLocale, record: page }),
})) as PageUrl[];
---

<Layout
  breadcrumbs={breadcrumbs}
  pageUrls={pageUrls}
  seoMetaTags={page._seoMetaTags}
>
  <PreviewModeSubscription query={query} variables={variables} />
  <h1>{page.title}</h1>
  <Blocks blocks={page.bodyBlocks} />
</Layout>
