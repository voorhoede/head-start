---
// based on https://github.com/datocms/datocms-svelte/blob/main/src/lib/components/StructuredText/Node.svelte
import {
  hasChildren,
  isBlock,
  isBlockquote,
  isCode,
  isHeading,
  isItemLink,
  isLink,
  isList,
  isListItem,
  isParagraph,
  isRoot,
  isSpan,
  isInlineItem,
  isThematicBreak,
  RenderError,
} from 'datocms-structured-text-utils';
import type * as STU from 'datocms-structured-text-utils';
import type { PredicateComponentTuple } from './StructuredText';
import Root from './Nodes/Root.astro';
import Paragraph from './Nodes/Paragraph.astro';
import Link from './Nodes/Link.astro';
import List from './Nodes/List.astro';
import ListItem from './Nodes/ListItem.astro';
import Blockquote from './Nodes/Blockquote.astro';
import Heading from './Nodes/Heading.astro';
import Span from './Nodes/Span.astro';
import Code from './Nodes/Code.astro';
import ThematicBreak from './Nodes/ThematicBreak.astro';

const DEFAULT_COMPONENTS: PredicateComponentTuple[] = [
  [isParagraph, Paragraph],
  [isRoot, Root],
  [isSpan, Span],
  [isLink, Link],
  [isList, List],
  [isHeading, Heading],
  [isBlockquote, Blockquote],
  [isListItem, ListItem],
  [isThematicBreak, ThematicBreak],
  [isCode, Code]
];

const throwRenderErrorForMissingComponent = (node: STU.Node) => {
  if (isInlineItem(node)) {
    throw new RenderError(
      'The Structured Text document contains an \'inlineItem\' node, but no component for rendering is specified!',
      node
    );
  }

  if (isItemLink(node)) {
    throw new RenderError(
      'The Structured Text document contains an \'itemLink\' node, but no component for rendering is specified!',
      node
    );
  }

  if (isBlock(node)) {
    throw new RenderError(
      'The Structured Text document contains a \'block\' node, but no component for rendering is specified!',
      node
    );
  }
};

const throwRenderErrorForMissingBlock = (node: STU.Block) => {
  throw new RenderError(
    `The Structured Text document contains a 'block' node, but cannot find a record with ID ${node.item} inside data.blocks!`,
    node
  );
};

const throwRenderErrorForMissingLink = (node: STU.ItemLink | STU.InlineItem) => {
  throw new RenderError(
    `The Structured Text document contains an 'itemLink' node, but cannot find a record with ID ${node.item} inside data.links!`,
    node
  );
};

const findBlock = (node: STU.Block, blocks: STU.StructuredText['blocks']) =>
  (blocks || []).find(({ id }) => id === node.item);
const findLink = (node: STU.ItemLink | STU.InlineItem, links: STU.StructuredText['links']) =>
  (links || []).find(({ id }) => id === node.item);

interface Props {
  node: STU.Node;
  blocks: STU.StructuredText['blocks'];
  links: STU.StructuredText['links'];
  components?: PredicateComponentTuple[];
}
const { node, blocks, links, components = [] } = Astro.props;

const predicateComponentTuple =
		[...components, ...DEFAULT_COMPONENTS].find(([predicate]) => predicate(node)) ||
		throwRenderErrorForMissingComponent(node);

const Component = (predicateComponentTuple ?? [])[1];
const block = isBlock(node) && (findBlock(node, blocks) || throwRenderErrorForMissingBlock(node));
const link =
		(isItemLink(node) && (findLink(node, links) || throwRenderErrorForMissingLink(node))) ||
		(isInlineItem(node) && (findLink(node, links) || throwRenderErrorForMissingLink(node)));
---

{ Component && (
  isBlock(node) ? (
    <Component {node} {block} />
  ) :
    isInlineItem(node) ? (
      <Component {node} {link} />
    ) :
      isItemLink(node) ? (
        <Component node={node} {link}>
          { hasChildren(node) && (
            node.children.map((child) => (
              <Astro.self node={child} blocks={blocks} links={links} {components} />
            ))
          ) }
        </Component>
      ) :
      /* default component handler */ (
          <Component node={node}>
            { hasChildren(node) && (
              node.children.map((child) => (
                <Astro.self node={child} blocks={blocks} links={links} {components} />
              ))
            ) }
          </Component>
        )
)}
