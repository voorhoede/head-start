---
import {
  isBlock,
  isBlockquote,
  isCode,
  isHeading,
  isItemLink,
  isLink,
  isList,
  isListItem,
  isParagraph,
  isRoot,
  isSpan,
} from 'datocms-structured-text-utils';
import type { Node } from 'datocms-structured-text-utils';
import type { InternalLinkRecord } from '@lib/types/datocms';
import type { AnyBlock } from '../../blocks/';
import Root from './Nodes/Root.astro';
import Paragraph from './Nodes/Paragraph.astro';
import Link from './Nodes/Link.astro';
import List from './Nodes/List.astro';
import ListItem from './Nodes/ListItem.astro';
import Blockquote from './Nodes/Blockquote.astro';
import Heading from './Nodes/Heading.astro';
import Span from './Nodes/Span.astro';
import Code from './Nodes/Code.astro';
import InternalLink from '../InternalLink/InternalLink.astro';
import Blocks from '../../blocks/Blocks.astro';
interface Props {
  node: Node
  blocks: AnyBlock[]
  links: InternalLinkRecord[]
}

const { node, blocks, links } = Astro.props;
const link = (isItemLink(node) && (links || []).find(({ id }) => isItemLink(node) && id === node.item)) || null;
const block = (isBlock(node) && (blocks || []).find(({ id }) => isBlock(node) && id === node.item)) || null;
---

<>
  {isRoot(node) ? (
    <Root>
      {node.children.map((child) => (
        <Astro.self node={child} blocks={blocks} links={links} />
      ))}
    </Root>
  ) : isParagraph(node) ? (
    <Paragraph>
      {node.children.map((child) => (
        <Astro.self node={child} blocks={blocks} links={links} />
      ))}
    </Paragraph>
  ) : isLink(node) ? (
    <Link node={node}>
      {node.children.map((child) => (
        <Astro.self node={child} blocks={blocks} links={links} />
      ))}
    </Link>
  ) : isList(node) ? (
    <List node={node}>
      {node.children.map((child) => (
        <Astro.self node={child} blocks={blocks} links={links} />
      ))}
    </List>
  ) : isListItem(node) ? (
    <ListItem>
      {node.children.map((child) => (
        <Astro.self node={child} blocks={blocks} links={links} />
      ))}
    </ListItem>
  ) : isHeading(node) ? (
    <Heading node={node}>
      {node.children.map((child) => (
        <Astro.self node={child} blocks={blocks} links={links} />
      ))}
    </Heading>
  ) : isBlockquote(node) ? (
    <Blockquote>
      {node.children.map((child) => (
        <Astro.self node={child} blocks={blocks} links={links} />
      ))}
    </Blockquote>
  ) : isSpan(node) ? (
    <Span node={node} />
  ) : isCode(node) ? (
    <Code node={node} />
  ) : isItemLink(node) ? (
    <InternalLink link={link} openInNewTab={node.meta?.find(entry => entry.id === 'target' && entry.value === '_blank')}>
      {node.children.map((child) => (
        <Astro.self node={child} blocks={blocks} links={links} />
      ))}
    </InternalLink>
  ) : isBlock(node) ? (
    <Blocks blocks={[block]} />
  ) : null}
</>
