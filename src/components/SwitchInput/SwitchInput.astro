---
interface Props {
  name?: string;
  checked?: boolean | string;
  [key: string]: unknown;
}
const { name, checked, ...props } = Astro.props;
---

<input
  {...props}
  name={name}
  checked={ checked ? 'checked' : undefined }
  role='switch'
  type='checkbox'
  is='switch-input'
/>

<script src='./SwitchInput.client.ts'></script>

<style>
  /* Based on https://web.dev/articles/building/a-switch-component */
  /* Variables */
  input {
    --thumb-size: 1em;
    --thumb: hsl(0 0% 100%);
    --thumb-highlight: hsl(0 0% 0% / 25%);
    --thumb-color: var(--thumb);
    --thumb-color-highlight: var(--thumb-highlight);
    --thumb-position: 0%;
    --thumb-transition-duration: 0.2s;

    --track-size: calc(var(--thumb-size) * 2);
    --track-padding: 2px;
    --track-inactive: hsl(80 0% 80%);
    --track-active: currentColor;
    --track-color-inactive: var(--track-inactive);
    --track-color-active: var(--track-active);

    --isLTR: 1;
  }
  input:dir(rtl) {
    --isLTR: 0;
  }
  input:checked {
    --thumb-position: calc(var(--track-size) - 100%);
    --thumb-position: calc((var(--track-size) - 100%) * var(--isLTR));
  }
  input:indeterminate {
    --thumb-position: calc((var(--track-size) / 2) - (var(--thumb-size) / 2));
    --thumb-position: calc(
      ((var(--track-size) / 2) - (var(--thumb-size) / 2)) * var(--isLTR)
    );
  }
  @media (prefers-reduced-motion: reduce) {
    input {
      --thumb-transition-duration: 0s;
    }
  }
  input:not(:disabled):hover::before {
    --highlight-size: 5px;
  }

  /* Track */
  input {
    appearance: none;
    cursor: pointer;
    touch-action: pan-y;

    background: var(--track-color-inactive);
    border-radius: var(--track-size);

    border: none;
    outline-offset: 5px;
    box-sizing: content-box;

    inline-size: var(--track-size);
    block-size: var(--thumb-size);
    padding: var(--track-padding);

    flex-shrink: 0;
    display: grid;
    align-items: center;
    grid: [track] 1fr / [track] 1fr;
  }
  input:checked {
    background: var(--track-color-active);
    --thumb-position: calc((var(--track-size) - 100%) * var(--isLTR));
  }
  input:disabled {
    cursor: not-allowed;
    --thumb-color: transparent;
  }

  /* Thumb */
  input::before {
    content: '';
    transform: translateX(var(--thumb-position));
    grid-area: track;
    inline-size: var(--thumb-size);
    block-size: var(--thumb-size);
    background: var(--thumb-color);
    border-radius: 50%;
    box-shadow: 0 0 0 var(--highlight-size) var(--thumb-color-highlight);
  }
  input:disabled::before {
    cursor: not-allowed;
    box-shadow: inset 0 0 0 2px hsl(0 0% 100% / 50%);
  }
  input::before {
    transition:
      transform var(--thumb-transition-duration) ease,
      box-shadow 0.25s ease;
  }
</style>
