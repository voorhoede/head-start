---
import type { UploadVideoField, VideoBlockFragment } from '@lib/types/datocms';
import { getLocale, getLocaleName } from '@lib/i18n';

interface Props {
  block: VideoBlockFragment;
}
const { block } = Astro.props;
const { alt, width, height } = block.videoAsset;
const video = block.videoAsset.video as UploadVideoField;
const aspectRatio = width && height ? width / height : null;
const activeLocale = getLocale();

/**
 * Mux generates one or more mp4 files depending on the quality of the source video.
 * ...
 * @https://docs.mux.com/guides/enable-static-mp4-renditions
 */
const mp4s = Array.from(new Set([
  video.mp4HighQualityUrl,
  video.mp4MediumQualityUrl,
  video.mp4LowQualityUrl,
])).map((url, index) => {
  const mp4MaxDimensions = [720, 480, 270];
  const maxDimension = mp4MaxDimensions[index];
  const minDimension = maxDimension / (aspectRatio || 1);
  const isLandscape = width && height ? width >= height : true;
  const mp4 = {
    url,
    width: isLandscape ? maxDimension : minDimension,
    height: isLandscape ? minDimension : maxDimension,
  };
  return mp4;
});
---

<video-block data-autoplay={ block.autoplay ? 'true' : 'false' }>
  <figure>
    <video
      poster={video.thumbnailUrl}
      controls
      crossorigin="anonymous"
      loop={block.loop ? 'true' : null}
      muted={block.mute ? 'true' : null}
      width={width}
      height={height}
      preload='none'
      style={{ aspectRatio }}
    >
      <source src={video.streamingUrl} type='application/vnd.apple.mpegurl' />
      <source src={video.streamingUrl} type='application/x-mpegURL' />
      <!-- <source src={video.mp4Url} type='video/mp4' /> -->
      { mp4s.map((mp4, index) => (
        <source 
          src={mp4.url} 
          type='video/mp4'
          media={ (index < mp4s.length - 1) ? `(min-width: ${mp4.width}px)` : null }
          width={mp4.width}
          height={mp4.height}
        />
      )) }
      { block.tracks.map(track => (
        <track
          kind={track.kind}
          label={track.title || getLocaleName(track.locale) }
          src={track.file.url}
          srclang={track.locale}
          default={track.locale === activeLocale}
        />
      )) }
      {alt}
    </video>

    {block.title && <figcaption>{block.title}</figcaption>}
  </figure>
</video-block>

<script src="./VideoBlock.client.ts"></script>

<style>
  video {
    display: block;
    max-width: 100%;
    height: auto;
    object-fit: contain;
  }
</style>
