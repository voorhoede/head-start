---
import { PUBLIC_IS_PRODUCTION } from 'astro:env/server';
import type { AnyBlock } from './Blocks';
import ActionBlock from './ActionBlock/ActionBlock.astro';
import EmbedBlock from './EmbedBlock/EmbedBlock.astro';
import ImageBlock from './ImageBlock/ImageBlock.astro';
import PagePartialBlock from './PagePartialBlock/PagePartialBlock.astro';
import TableBlock from './TableBlock/TableBlock.astro';
import TextBlock from './TextBlock/TextBlock.astro';
import TextImageBlock from './TextImageBlock/TextImageBlock.astro';
import VideoBlock from './VideoBlock/VideoBlock.astro';
import VideoEmbedBlock from './VideoEmbedBlock/VideoEmbedBlock.astro';
import GroupingBlock from './GroupingBlock/GroupingBlock.astro';

const blocksByTypename = {
  ActionBlockRecord: ActionBlock,
  EmbedBlockRecord: EmbedBlock,
  ImageBlockRecord: ImageBlock,
  PagePartialBlockRecord: PagePartialBlock,
  TableBlockRecord: TableBlock,
  TextBlockRecord: TextBlock,
  TextImageBlockRecord: TextImageBlock,
  VideoBlockRecord: VideoBlock,
  VideoEmbedBlockRecord: VideoEmbedBlock,
  GroupingBlockRecord: GroupingBlock,
};

interface Props {
  blocks: AnyBlock[];
}
const { blocks } = Astro.props;

const raise = (message: string) => {
  if (!PUBLIC_IS_PRODUCTION) {
    console.error(message);
  }
  return message;
};
---

{
  blocks.map((block) => {
    const { __typename, ...rest } = block;
    if (!Object.keys(rest).length) {
      const message = raise(`No block data found for "${__typename}". Is the associated fragment included in the query?`);
      return <script define:vars={{ message }} is:inline>console.log(message);</script>;
    }
    const Block = blocksByTypename[__typename as keyof typeof blocksByTypename];
    if (!Block) {
      const message = raise(`No block data found for "${__typename}". Is it included in ${import.meta.filename}?`);
      return <script define:vars={{ message }} is:inline>console.log(message);</script>;
    }
    //@ts-expect-error - since block can be any block its type is conflated to `never`.
    return <Block block={block} />;
  })
}
