---
import type { ImageBlockFragment } from '../../lib/types/datocms';
import { t } from '../../lib/i18n';

interface Props {
  block: ImageBlockFragment
}

const { block } = Astro.props;
const { image } = block;
const sharedImageAttributes = {
  alt: image.alt ? image.alt : '', // default to empty string for accessibility
  loading: 'lazy',
  'data-unavailable': t('image_unavailable'),
};
---

<figure>
  {
    image.responsiveImage
      ? // bitmap images have Imgix generated props (responsiveImage.*):
      <img
        { ...sharedImageAttributes }
        sizes={ image.responsiveImage.sizes }
        srcSet={ image.responsiveImage.srcSet }
        src={ image.responsiveImage.src }
        style={{
          aspectRatio: image.responsiveImage.aspectRatio,
          backgroundColor: image.responsiveImage.bgColor,
          backgroundImage: `url(${image.responsiveImage.base64})`
        }}
      />
      : // vector images do not have Imgix generated props, so using as is:
      <img 
        { ...sharedImageAttributes }
        src={ image.url } 
        style={{
          aspectRatio: `${image.width}/${image.height}`,
        }}
      />
  }
  { image.title && (
    <figcaption>
      { image.title }
    </figcaption>
  )}
</figure>

<style>
img {
  display: block;
  width: 100%;
  background-size: cover;
}

/**
 * broken image styling, only applies when image fails to load
 * @see https://bitsofco.de/styling-broken-images/
 */
 img {
  position: relative;
  text-align: center;
 }
 img:after {
  content: attr(alt) " (" attr(data-unavailable) ")";
  display: block;
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  padding-top: calc(50% - 1em);
  background-color: #f1f1f1;
 }
</style>
