---
import { t } from '@lib/i18n';

const defaultSizes = [1280, 960, 640, 320];

const getImageSrc = (url: string, params: Record<string, number|string> = {}) => {
  const defaults: Record<string, number|string> = {
    auto: 'format,compress',
    q: 80,
    w: Math.max(...defaultSizes),
  };
  const stringifyObjectValues = (obj: Record<string, number|string>) => {
    return Object.entries(obj).reduce((acc, [key, value]) => ({ ...acc, [key]: value.toString() }), {});
  };
  const queryString = new URLSearchParams(stringifyObjectValues({ ...defaults, ...params })).toString();
  return new URL(`${url}?${queryString}`).toString();
};

const getImageSrcSet = (url: string, sizes = defaultSizes, params = {}) => {
  return sizes.map((size) => {
    const src = getImageSrc(url, { ...params, w: size, fit: 'max' });
    return `${src} ${size}w`;
  }).join(', ');
};

const { image, loading = 'lazy' } = Astro.props;
const altText = image.alt ? image.alt : ''; // default to empty string for accessibility
const imageUnavailableMessage = t('image_unavailable');
---
<image-block>
  <figure>
    {
      image.responsiveImage
        ? // bitmap images have Imgix generated props (responsiveImage.*):
        <img
          alt={ altText }
          loading={ loading }
          srcset={ getImageSrcSet(image.url) }
          src={ getImageSrc(image.url) }
          width={ image.width }
          height={ image.height }
          style={{
            backgroundImage: `url(${image.responsiveImage.base64})`
          }}
          data-unavailable={ imageUnavailableMessage }
        />
        : // vector images do not have Imgix generated props, so using as is:
        <img
          alt={ altText }
          loading={ loading }
          src={ image.url }
          width={ image.width }
          height={ image.height }
          data-unavailable={ imageUnavailableMessage }
        />
    }
    { image.title && (
      <figcaption>{ image.title }</figcaption>
    )}
  </figure>
</image-block>

<script src="./Image.client.ts"></script>

<style>
/* functional styling */

img {
  display: block;
  max-width: 100%;
  height: auto;
  background-size: cover;
}

/**
 * broken image styling, only applies when image fails to load
 * @see https://bitsofco.de/styling-broken-images/
 */
 img {
  position: relative;
  text-align: center;
 }
 img:after {
  content: attr(alt) " (" attr(data-unavailable) ")";
  display: block;
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  padding-top: calc(50% - 1em);
  background-color: #f1f1f1;
 }

 /* basic styling, can be removed */
 figcaption {
    text-align: center;
  }
</style>
